name: Release

on:
  push:
    tags: [ 'v*.*.*' ]   # ← only runs on release tags

permissions:
  contents: read

jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # attach assets to GH Release
      id-token: write     # OIDC for PyPI Trusted Publisher
      attestations: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: "3.12"

      # Build tools via pipx (pinned versions; no raw pip)
      - name: Install pipx + tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y pipx
          pipx ensurepath
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          pipx install build==1.2.2
          pipx install twine==5.1.1

      # Guard: tag (vX.Y.Z) must equal pyproject.toml version (X.Y.Z)
      - name: Check version matches tag
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          PYVER=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text(encoding='utf-8'))['project']['version'])")
          echo "tag=${TAG}"
          echo "pyproject=${PYVER}"
          test "$PYVER" = "$TAG" || { echo 'ERROR: pyproject.toml version != tag'; exit 1; }

      - name: Clean dist
        run: rm -rf dist/* || true

      - name: Build distributions
        run: pyproject-build -o dist   # or: python -m build -o dist

      - name: Inspect wheel METADATA (must have Name & Version)
        run: |
          python -c "import glob,zipfile; \
          whl=glob.glob('dist/*.whl')[0]; \
          z=zipfile.ZipFile(whl); names=z.namelist(); \
          meta=[n for n in names if n.endswith('.dist-info/METADATA')]; \
          assert meta, 'Wheel missing .dist-info/METADATA'; \
          text=z.read(meta[0]).decode(); \
          print('---- METADATA head ----'); \
          print('\n'.join(text.splitlines()[:15])); \
          print('---- /METADATA ----'); \
          assert 'Name: decision-security' in text and 'Version: ' in text" 
          
      # - name: Twine check
      #   run: twine check dist/*
      - name: Generate SLSA provenance for dist/*
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a
        with:
          subject-path: 'dist/*'

      - name: Sign wheels and sdists (Sigstore)
        uses: sigstore/gh-action-sigstore-python@f7ad0af51a5648d09a20d00370f0a91c3bdf8f84
        with:
          inputs: dist/*

      - name: Create GitHub Release (attach dists)
        uses: softprops/action-gh-release@62c96d0c4e8a889135c1f3a25910db8dbe0e85f7
        with:
          files: |
            dist/*.tar.gz
            dist/*.whl
            dist/*.sig
            dist/*.crt
            dist/*.sigstore

      # Skip publish if version already exists on PyPI (avoids "File already exists")
      - name: Skip if version exists on PyPI
        id: pypi-exists
        run: |
          PKG="decision-security"
          VER="${GITHUB_REF_NAME#v}"
          python - <<PY || exit 0
            import json, sys, urllib.request
            pkg = sys.argv[1]; ver = sys.argv[2]
            with urllib.request.urlopen(f"https://pypi.org/pypi/{pkg}/json", timeout=10) as r:
              data = json.load(r)
            if ver in data.get("releases", {}):
              print(f"Version {ver} already on PyPI; skipping publish.")
              sys.exit(78)  # neutral
          python - "$PKG" "$VER" <<'PY' || exit 0
          PY
        continue-on-error: true

      - name: Publish to PyPI (OIDC Trusted Publisher)
        if: startsWith(github.ref, 'refs/tags/') && steps.pypi-exists.outcome != 'success'
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          print-hash: true
